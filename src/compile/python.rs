use crate::process;

pub fn compile(contents: String) -> String {
    let instructions = process(contents);

    let mut output = String::new();
    output.push_str("# automatically generated by bf-rs compiler\n");
    output.push_str("# https://github.com/sasquatchdev/bf-rs\n\n");
    output.push_str("tape = [0] * 30000\nptr = 0\n");   // initialise tape and ptr

    let mut depth = 0;
    let mut d_depth: i32 = 0;

    for instruction in instructions {
        output.push_str(&apply_depth(match instruction {
            '>' => "ptr += 1\n",
            '<' => "ptr -= 1\n",
            '+' => "tape[ptr] += 1\n",
            '-' => "tape[ptr] -= 1\n",
            '.' => "print(chr(tape[ptr]), end='')\n",
            ':' => "print(tape[ptr], end='')\n",
            ',' => "tape[ptr] = ord(input())\n",
            '[' => { d_depth += 1; "while tape[ptr]:\n" },
            ']' => { d_depth -= 1; "pass\n" },
            _ => { continue; }
        }, depth));

        depth = (depth as i32 + d_depth) as usize;
        d_depth = 0;
    }

    output
}

fn apply_depth(input: &str, depth: usize) -> String {
    let mut output = String::new();
    for _ in 0 .. depth {
        output.push_str("    ");
    }
    output.push_str(input);
    output
}
